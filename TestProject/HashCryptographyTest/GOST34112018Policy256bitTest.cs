using HashCryptography;
using HashCryptography.Implementation;
using NUnit.Framework;

namespace TestProject.HashCryptographyTest
{
    [TestFixture]
    class GOST34112018Policy256bitTest
    {
        [SetUp]
        public void Setup()
        {
            m_Function = new HashFunction(new GOST34112018Policy256bit());
        }

        [Test]
        public void GOSTTestExample1()
        {
            byte[] testCase =
            {
                0x32, 0x31, 0x30,
                0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30
            };

            byte[] expectedAns =
            {
                0x00, 0x55, 0x7b, 0xe5, 0xe5, 0x84, 0xfd, 0x52,
                0xa4, 0x49, 0xb1, 0x6b, 0x02, 0x51, 0xd0, 0x5d,
                0x27, 0xf9, 0x4a, 0xb7, 0x6c, 0xba, 0xa6, 0xda,
                0x89, 0x0b, 0x59, 0xd8, 0xef, 0x1e, 0x15, 0x9d
            };


            byte[] testAns = m_Function.GetHash(testCase);


            Assert.AreEqual(expectedAns.Length, testAns.Length);
            for (int i = 0; i < expectedAns.Length; ++i)
            {
                Assert.AreEqual(expectedAns[i], testAns[i]);
            }
        }

        [Test]
        public void GOSTTestExample2()
        {
            byte[] testCase =
            {
                0xfb, 0xe2, 0xe5, 0xf0, 0xee, 0xe3, 0xc8, 0x20,
                0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb,
                0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed,
                0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2,
                0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1,
                0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c,
                0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6,
                0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c,
                0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1
            };

            byte[] expectedAns =
            {
                0x50, 0x8f, 0x7e, 0x55, 0x3c, 0x06, 0x50, 0x1d,
                0x74, 0x9a, 0x66, 0xfc, 0x28, 0xc6, 0xca, 0xc0,
                0xb0, 0x05, 0x74, 0x6d, 0x97, 0x53, 0x7f, 0xa8,
                0x5d, 0x9e, 0x40, 0x90, 0x4e, 0xfe, 0xd2, 0x9d
            };


            byte[] testAns = m_Function.GetHash(testCase);


            Assert.AreEqual(expectedAns.Length, testAns.Length);
            for (int i = 0; i < expectedAns.Length; ++i)
            {
                Assert.AreEqual(expectedAns[i], testAns[i]);
            }
        }

        private HashFunction m_Function;
    }
}
